name: üêß AppImage Build

on:
  workflow_call:
    inputs:
      tag:
        description: 'Git tag for release builds.'
        required: false
        type: string
      flutter-version:
        description: 'Flutter version (optional).'
        required: false
        type: string
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-appimage:
    name: üêß Build and Deploy AppImage
    runs-on: ubuntu-22.04
    env:
      APP_NAME: Flites
      APP_ID: app.flites.editor
      APP_NAME_LOWER: flites
    steps:
      - name: DEBUG Print Workflow Input Tag
        run: |
          echo "Workflow Input (inputs.tag): ${{ inputs.tag }}"

      - name: üìö Git Checkout
        uses: actions/checkout@v4
        with:
          # Checkout tag only if called for release, otherwise default
          ref: ${{ github.event_name == 'workflow_call' && inputs.tag || github.ref }}

      - name: Determine Build Context & Variables
        id: vars
        uses: ./.github/actions/determine_build_vars
        with:
          platform: 'linux_appimage'
          event_name: ${{ github.event_name }}
          tag_input: ${{ inputs.tag }}
          pr_number: ${{ github.event.number }}
          run_id: ${{ github.run_id }}

      - name: üì¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter-version || '3.27.2' }}
          architecture: x64
          cache: true

      - name: üì¶ Setup Melos
        uses: bluefireteam/melos-action@v2

      - name: üîß Basic Linux Setup
        run: |
          set -e
          sudo apt-get update || exit 1
          sudo apt-get install -y ninja-build libgtk-3-dev cmake pkg-config || exit 1
          sudo apt-get install -y wget fuse || exit 1
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/
          flutter config --enable-linux-desktop || exit 1

      - name: üîÑ Get Dependencies
        run: |
          melos bootstrap
          flutter pub get

      - name: üèóÔ∏è Build Linux App
        run: |
          export CXX=/usr/bin/clang++
          export CC=/usr/bin/clang
          cd apps/flites
          flutter build linux --release

      - name: üìã Copy Build Artifacts
        run: |
          mkdir -p AppDir/usr/{bin,share/{applications,icons/hicolor/256x256/apps,metainfo}}
          cp -r apps/flites/build/linux/x64/release/bundle/* AppDir/usr/bin/

      - name: üñ•Ô∏è Create Desktop Entry
        run: |
          cat > AppDir/${{ env.APP_NAME_LOWER }}.desktop << EOL
          [Desktop Entry]
          Name=${{ env.APP_NAME }}
          Exec=${{ env.APP_NAME_LOWER }}
          Icon=${{ env.APP_NAME_LOWER }}
          Type=Application
          Categories=Utility;
          Comment=A sprite generator written in flutter
          EOL
          cp AppDir/${{ env.APP_NAME_LOWER }}.desktop AppDir/usr/share/applications/

      - name: üé® Copy Icons
        run: |
          cp apps/flites/assets/images/flites_logo.png AppDir/${{ env.APP_NAME_LOWER }}.png
          cp apps/flites/assets/images/flites_logo.png AppDir/usr/share/icons/hicolor/256x256/apps/${{ env.APP_NAME_LOWER }}.png

      - name: üìú Create AppRun Script
        run: |
          cat > AppDir/AppRun << EOL
          #!/bin/sh
          HERE=\$(dirname \$(readlink -f \${0}))
          export PATH="\${HERE}/usr/bin/:\${PATH}"
          export LD_LIBRARY_PATH="\${HERE}/usr/lib/:\${LD_LIBRARY_PATH}"
          exec "\${HERE}/usr/bin/${{ env.APP_NAME_LOWER }}" "\$@"
          EOL
          chmod +x AppDir/AppRun

      - name: üìù Create Metadata
        if: steps.vars.outputs.build_type == 'release'
        run: |
          cat > AppDir/usr/share/metainfo/${{ env.APP_NAME_LOWER }}.appdata.xml << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <component type="desktop-application">
            <id>${{ env.APP_ID }}</id>
            <name>${{ env.APP_NAME }}</name>
            <summary>A sprite generator written in flutter</summary>
            <metadata_license>MIT</metadata_license>
            <project_license>MIT</project_license>
            <description>
              <p>
                Flites is a sprite generator built with Flutter.
              </p>
            </description>
            <categories>
              <category>Utility</category>
            </categories>
            <releases>
              <release version="${{ steps.vars.outputs.package_version }}" date="$(date +%Y-%m-%d)"/>
            </releases>
          </component>
          EOL

      - name: üì¶ Create AppImage
        run: |
          ARCH=x86_64 appimagetool AppDir ${{ steps.vars.outputs.artifact_suffix }}

      - name: ‚¨ÜÔ∏è Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.artifact_upload_name }}
          path: ${{ steps.vars.outputs.artifact_suffix }}

      - name: üß™ Test AppImage
        run: |
          # Use the dynamic filename determined by the composite action
          APPIMAGE_FILE="${{ steps.vars.outputs.artifact_suffix }}"

          chmod +x "${APPIMAGE_FILE}"

          CONTAINER_ID=$(docker create -t debian:stable sleep infinity)
          docker start $CONTAINER_ID

          docker exec $CONTAINER_ID bash -c "
            set -e && \
            apt-get update && \
            apt-get install -y libgtk-3-0 libfuse2"

          # Copy the file WITHOUT renaming it inside the container
          docker cp "${APPIMAGE_FILE}" $CONTAINER_ID:/${APPIMAGE_FILE}

          # Use the original dynamic filename inside the container tests
          docker exec $CONTAINER_ID bash -c "
            chmod +x /${APPIMAGE_FILE} && \
            which /${APPIMAGE_FILE}" # Or other basic tests like --appimage-extract

          docker rm -f $CONTAINER_ID 