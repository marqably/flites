name: üè¨ macOS App Store Build & Upload

on:
  workflow_dispatch:
    inputs:
      version:
        description: Optional marketing version override (e.g. 0.0.5)
        required: false
      buildNumber:
        description: Optional build number override (e.g. 42)
        required: false
  push:
    branches:
      - feat/beau/ci-macos
    tags:
      - 'v*'

jobs:
  build-upload:
    name: üè¨ Build & Upload to App Store Connect
    runs-on: macos-14
    env:
      APP_DIR: apps/flites
      MACOS_DIR: apps/flites/macos
      TEAM_ID: ${{ secrets.MACOS_TEAM_ID }}
      ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
      ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
      ASC_PRIVATE_KEY: ${{ secrets.ASC_PRIVATE_KEY }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      DIST_P12_BASE64: ${{ secrets.MACOS_DIST_P12_BASE64 }}
      DIST_P12_PASSWORD: ${{ secrets.MACOS_DIST_P12_PASSWORD }}
      INSTALLER_P12_BASE64: ${{ secrets.MACOS_INSTALLER_P12_BASE64 }}
      INSTALLER_P12_PASSWORD: ${{ secrets.MACOS_INSTALLER_P12_PASSWORD }}
    steps:
      - name: üìö Git Checkout
        uses: actions/checkout@v4

      - name: üì¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: üì• Flutter precache (macOS artifacts)
        run: flutter precache --macos

      - name: üì¶ Setup Melos
        uses: bluefireteam/melos-action@v2

      - name: ‚ú® Initialize Flutter project (clean, doctor, bootstrap)
        shell: bash
        run: |
          echo "üßπ Cleaning Flutter and Xcode artifacts"
          cd apps/flites
          flutter clean
          cd macos
          xcodebuild clean || echo "Xcode clean skipped"
          rm -rf Pods Podfile.lock || true
          cd ../../..
          echo "üîß Enable macOS desktop and run doctor"
          flutter config --enable-macos-desktop
          flutter doctor -v
          echo "üîÑ Bootstrap workspace with melos"
          melos bootstrap

      - name: üì¶ Install CocoaPods and dependencies
        shell: bash
        working-directory: ${{ env.MACOS_DIR }}
        run: |
          brew install cocoapods
          pod install --repo-update

      - name: üîß Export FLUTTER_ROOT for Xcode build phases
        shell: bash
        run: |
          echo "FLUTTER_ROOT=$(dirname $(dirname $(which flutter)))" >> $GITHUB_ENV

      - name: üîé Verify Flutter SDK path for Xcode script
        shell: bash
        run: |
          echo "FLUTTER_ROOT=$FLUTTER_ROOT"
          test -d "$FLUTTER_ROOT" || { echo "‚ùå FLUTTER_ROOT not set correctly"; exit 1; }
          test -f "$FLUTTER_ROOT/packages/flutter_tools/bin/macos_assemble.sh" || { echo "‚ùå macos_assemble.sh not found"; ls -la "$FLUTTER_ROOT/packages/flutter_tools/bin"; exit 1; }

      - name: üîÑ Flutter pub get (app)
        working-directory: ${{ env.APP_DIR }}
        run: flutter pub get

      - name: üåê Generate localization (gen-l10n)
        working-directory: ${{ env.APP_DIR }}
        run: flutter gen-l10n

      - name: üèóÔ∏è Pre-build Flutter macOS to generate ephemeral files
        working-directory: ${{ env.APP_DIR }}
        run: |
          flutter build macos --release


      - name: üêç Install App Store Connect CLI (pipx)
        shell: bash
        run: |
          brew update
          brew install pipx
          pipx ensurepath
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          pipx install codemagic-cli-tools

      - name: üîê Import Apple Distribution certificate (codesign)
        if: env.DIST_P12_BASE64 != ''
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ env.DIST_P12_BASE64 }}
          p12-password: ${{ env.DIST_P12_PASSWORD }}
          keychain: dist-signing
          keychain-password: ${{ env.KEYCHAIN_PASSWORD }}

      - name: üîê Import Mac Installer Distribution certificate (productsign)
        if: env.INSTALLER_P12_BASE64 != ''
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ env.INSTALLER_P12_BASE64 }}
          p12-password: ${{ env.INSTALLER_P12_PASSWORD }}
          keychain: installer-signing
          keychain-password: ${{ env.KEYCHAIN_PASSWORD }}

      

      - name: üîë Write App Store Connect API key to file
        run: |
          echo "$ASC_PRIVATE_KEY" > AuthKey_${{ env.ASC_KEY_ID }}.p8

      - name: üèóÔ∏è Build archive (xcodebuild)
        working-directory: ${{ env.MACOS_DIR }}
        run: |
          set -euo pipefail
          FLUTTER_ROOT="$FLUTTER_ROOT" xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/Runner.xcarchive \
            -destination 'generic/platform=macOS' \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            clean archive
          if [ ! -d build/Runner.xcarchive ]; then
            echo "‚ùå Archive not found at $(pwd)/build/Runner.xcarchive"
            exit 1
          fi

      - name: üßæ Create ExportOptions.plist
        working-directory: ${{ env.MACOS_DIR }}
        run: |
          cat > ExportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>teamID</key>
            <string>${TEAM_ID}</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>destination</key>
            <string>export</string>
          </dict>
          </plist>
          PLIST

      - name: üì¶ Export .pkg (xcodebuild -exportArchive)
        working-directory: ${{ env.MACOS_DIR }}
        run: |
          set -euo pipefail
          rm -rf build/export || true
          if [ ! -d build/Runner.xcarchive ]; then
            echo "‚ùå Missing archive. Previous step may have failed."
            exit 1
          fi
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/export \
            -exportOptionsPlist ExportOptions.plist
          echo "Exported files:" && ls -lah build/export || true

      - name: üîé Verify pkg signature
        working-directory: ${{ env.MACOS_DIR }}
        run: /usr/sbin/pkgutil --check-signature build/export/*.pkg | cat

      - name: ‚òÅÔ∏è Upload to App Store Connect
        env:
          APP_STORE_CONNECT_ISSUER_ID: ${{ env.ASC_ISSUER_ID }}
          APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ env.ASC_KEY_ID }}
        working-directory: ${{ env.MACOS_DIR }}
        run: |
          app-store-connect publish \
            --path build/export/*.pkg \
            --issuer-id "$ASC_ISSUER_ID" \
            --key-id "$ASC_KEY_ID" \
            --private-key @file:../AuthKey_${{ env.ASC_KEY_ID }}.p8

      - name: ‚¨ÜÔ∏è Upload artifact (.pkg)
        uses: actions/upload-artifact@v4
        with:
          name: macos-pkg
          path: ${{ env.MACOS_DIR }}/build/export/*.pkg

      - name: üßπ Restore default keychain and cleanup
        if: always()
        shell: bash
        run: |
          # Restore keychain search list and default
          security list-keychains -d user -s login.keychain || true
          security default-keychain -s login.keychain || true
          
          # Delete any custom signing keychains if present (match both .keychain and .keychain-db)
          security list-keychains -d user | tr -d '"' | while read -r KC; do
            case "$KC" in
              *dist-signing*|*installer-signing*)
                security delete-keychain "$KC" || true
                ;;
            esac
          done


