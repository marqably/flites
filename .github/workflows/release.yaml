name: Create Release

on:
  push:
    tags:
      - 'v*' 

jobs:
  call_build_appimage:
    name: Call Appimage Build üêß
    uses: ./.github/workflows/appimage_build.yaml
    with:
      tag: ${{ github.ref_name }} 
    secrets: inherit 

  call_build_debian:
    name: Call Debian Build üêß
    uses: ./.github/workflows/debian_build.yaml
    with:
      tag: ${{ github.ref_name }} 
    secrets: inherit 

  call_build_windows:
    name: Call Windows Build ‚¨ú
    uses: ./.github/workflows/windows_build.yaml
    with:
      tag: ${{ github.ref_name }}
    secrets: inherit

  call_build_macos:
    name: Call macOS Build üçé
    uses: ./.github/workflows/macos_build.yaml
    with:
      tag: ${{ github.ref_name }}
    secrets: inherit

  call_build_web:
    name: Call Web Build üåê
    uses: ./.github/workflows/web_build.yaml
    with:
      tag: ${{ github.ref_name }}
    secrets: inherit

  # --- Publish Release Job ---
  publish_release:
    name: Publish GitHub Release üöÄ
    runs-on: ubuntu-latest
    # This job runs only after all specified build jobs succeed
    needs:
      - call_build_appimage
      - call_build_debian
      - call_build_windows
      - call_build_macos
      - call_build_web

    permissions:
      contents: write 

    steps:
      - name: DEBUG Print Trigger Tag
        run: |
         echo "Triggering Tag (github.ref_name): ${{ github.ref_name }}"
      # Step 1: Download all artifacts produced by the 'needs' jobs
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Downloads into ./artifacts/<artifact_name>/

      # Step 2: List downloaded files (for debugging)
      - name: List downloaded artifacts
        run: ls -lR artifacts

      # Step 3: Create the GitHub Release and upload assets
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # tag_name: ${{ github.ref_name }} # Defaults to the tag that triggered workflow
          name: ${{ github.ref_name }} # Names the release (e.g., "Release v1.0.0")
          body: |
            ## Flites ${{ github.ref_name }}
            
            A modern sprite animation tool built with Flutter for creating and editing sprite animations.
            
            ### Downloads
            - **Linux**: AppImage and Debian package
            - **Windows**: Portable ZIP archive
            - **Web**: Web application package
            - **macOS**: Via Mac App Store
            
            ### Installation
            - **Linux AppImage**: Download, make executable (`chmod +x`), and run
            - **Linux Debian**: Install with `sudo dpkg -i flites_*.deb`
            - **Windows**: Extract ZIP and run `flites.exe`
            - **Web**: Extract ZIP and open `index.html` in your browser
            
            For detailed changes, see [CHANGELOG.md](https://github.com/marqably/flites/blob/main/CHANGELOG.md)
          draft: false # Set to true to create a draft release instead of publishing
          prerelease: ${{ contains(github.ref_name, '-') }} # Mark as pre-release if tag contains '-' (e.g., v1.0.0-beta)
          files: |
            # Paths to the files *inside* the directories created by download-artifact
            # The directory name matches the 'release_artifact_name' from your config
            artifacts/flites-linux-artifact/*.AppImage
            artifacts/flites-linux-deb-artifact/*.deb
            artifacts/flites-windows-artifact/*.zip
            artifacts/flites-web-artifact/*.zip
        env:
          # The GITHUB_TOKEN is automatically available to the workflow
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}