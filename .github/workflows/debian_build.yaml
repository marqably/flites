name: 🐧 Debian Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feat/beau-debian-build
    tags:
      - 'v*'

jobs:
  build-debian:
    name: 🐧 Build and Deploy Debian
    runs-on: ubuntu-22.04
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.2'
          architecture: x64

      - name: 🗄️ Cache Flutter
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/flutter
          key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}

      - name: 🗄️ Cache Pub Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: pub-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}

      - name: 📦 Setup Melos
        uses: bluefireteam/melos-action@v2

      - name: 🔧 Basic Linux Setup
        run: |
          set -e
          sudo apt-get update || exit 1
          sudo apt-get install -y ninja-build libgtk-3-dev cmake pkg-config || exit 1
          sudo apt-get install -y dpkg-dev debhelper || exit 1
          flutter config --enable-linux-desktop || exit 1

      - name: 🔄 Get Dependencies
        run: |
          melos bootstrap
          flutter pub get
      
      - name: 📝 Create debian structure
        run: |
          mkdir -p debian/DEBIAN
          mkdir -p debian/usr/bin
          mkdir -p debian/usr/share/applications
          mkdir -p debian/usr/share/icons/hicolor/scalable/apps

      - name: 📄 Create Control File
        run: |
          cat > debian/DEBIAN/control << EOL
          Package: flites
          Version: 0.0.1
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: marqably vienna@marqably.com
          Description: A sprite generator written in flutter
          EOL
      
      - name: 🔧 Install Build Dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev
          clang++ --version

      - name: 🏗️ Build Linux App
        run: |
          export CXX=/usr/bin/clang++
          export CC=/usr/bin/clang
          cd apps/flites
          flutter build linux --release

      - name: 📋 Copy Build Artifacts
        run: |
          cp -r apps/flites/build/linux/x64/release/bundle/* debian/usr/bin/
          chmod +x debian/usr/bin/flites

      - name: 🖥️ Create Desktop Entry
        run: |
          cat > debian/usr/share/applications/flites.desktop << EOL
          [Desktop Entry]
          Name=Flites
          Exec=/usr/bin/flites
          Icon=steps
          Type=Application
          Categories=Utility;
          EOL

      - name: 🎨 Copy Icons
        run: |
          cp apps/flites/assets/icons/steps.svg debian/usr/share/icons/hicolor/scalable/apps/steps.svg
          chmod 644 debian/usr/share/icons/hicolor/scalable/apps/steps.svg

      - name: 📦 Build Package
        run: |
          rm -rf flites_0.0.1_amd64.deb
          dpkg-deb --build debian ./flites_0.0.1_amd64.deb
          ls -l ./flites_0.0.1_amd64.deb
          file ./flites_0.0.1_amd64.deb

      - name: ✅ Verify Package
        run: |
          dpkg -I flites_0.0.1_amd64.deb
          dpkg --contents flites_0.0.1_amd64.deb

      - name: ⬆️ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: flites-debian-package
          path: flites_0.0.1_amd64.deb

      - name: 🛠️ Test Debian Package
        run: |
          # Create container with tty to keep it running
          CONTAINER_ID=$(docker create -t debian:stable sleep infinity)
          
          # Start container
          docker start $CONTAINER_ID
          
          # Install dependencies
          docker exec $CONTAINER_ID bash -c "
            set -ex && \
            apt-get update && \
            apt-get install -y libgtk-3-0"
          
          # Install package
          docker cp flites_0.0.1_amd64.deb $CONTAINER_ID:/package.deb
          docker exec $CONTAINER_ID bash -c "
            dpkg -i /package.deb || \
            (apt-get install -f -y && dpkg -i /package.deb)"
          
          # Verify installation
          docker exec $CONTAINER_ID which flites
          
          # Cleanup
          docker rm -f $CONTAINER_ID